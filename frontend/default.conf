# Nginx is a high-performance web server and reverse proxy server used to serve static files 
# and forward requests to backend services (like Gunicorn for Django apps) efficiently.

# Nginx Configuration

# The 'server' block defines a virtual server for Nginx. This block listens for incoming HTTP requests
# and determines how to handle them based on the configuration inside it.
server {
    # Listen for incoming requests on port 80 on all network interfaces
    listen 0.0.0.0:80;  # Ensures Nginx listens on all interfaces on port 80 (HTTP).
    
    # Define the server name (you can use your domain here, 'localhost' is just a placeholder)
    server_name localhost;  # The domain name of the server, typically replaced with your real domain.

    # Handle requests to the root URL ('/')
    location / {
        # Serve static files (HTML, CSS, JS, etc.) from the /app/backend/staticfiles directory
        root /app/backend/staticfiles;  # Static files like HTML are served from this directory.
        
        # If the requested file doesn't exist, try serving the 'index.html' file (SPA fallback)
        try_files $uri /index.html;  # If a file is not found, serve the index.html (single-page app behavior).
    }

    # Handle requests to the '/api/' path, typically for API requests
    location /api/ {
        # Forward the incoming request to the backend running on localhost:8000 (typically Gunicorn)
        proxy_pass http://localhost:8000;  # Proxy requests to the backend server (like Gunicorn running Django).
        
        # Set headers to forward the real client information and protocol to the backend server
        proxy_set_header Host $host;  # Preserve the original 'Host' header.
        proxy_set_header X-Real-IP $remote_addr;  # Forward the real IP address of the client.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the 'X-Forwarded-For' header (proxy chain).
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol used (http or https).
    }

    # Optionally, you can handle static media files or other backend-related paths here.
    # This is often used for serving uploaded media or other assets that need to be handled separately.
    # location /static/ {
    #     root /app/backend/static/;  # Specify the path for static files like images, documents, etc.
    # }

    # Optionally, you can configure error handling or logging, though these are not included here.
    # You can add error_page directives to customize error pages or configure logging here.
}
